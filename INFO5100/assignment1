1. Hiking
 1.1. Rent a ReachNow to drive to mountain rainier on weekends with friends
 1.2. On the way, fill the gas
 1.3. On the way, eat at restaurant for lunch
 1.4. Buy the ticket to get into the park
 1.5. Book a hotel or check in the hotel.
 
 1.
	CarRental
	data: Name, cars[] AvaliableCars
	actions: authorize, display

	Renter
	data: Name, Account, Position, Route, Payment
	actions: login, search, order, unlock, drive, walk

	RentOrder
	data: renter, StartTime, EndTime
	actions:

	Car
	data: Number, Position, Availability, Pin
	actions

	GasStation
	data: price
	action: fuel, charge

	Restaurant
	data: food[] menu, price
	action: receive, serve

	TicketOffice
	data: price
	action: sell, check

	Hotel
	data: room[] AvaliableRooms, price
	action: check, receive

 1.1
	CarRental ReachNow
	Renter Dave
	Car RentbyDave

	Dave.login (ReachNow, Account)->Authorize
	If (Authorize is true):
		ReachNow.DisplayAvaliableCarsNearby (Dave.position)->AvaliableCars
		Dave.PutOrder (RentbyDave, payment, ReachNow)-> dave'sOrder
		ReachNow.ReceiveOrder (dave'sOrder)-> RentbyDave.Number, RentbyDave.Pin
		Dave.unlockthecar (RentbyDave, RentbyDave.Pin)
		Dave.drive (RentbyDave, RouteToRainier)
	else Dave.TryLoginAgain

 1.2 (continued)
	GasStation RainierFuel
	
	Dave.drive (RentbyDave, ToRainierFuel)
	RainierFuel.receive (RentbyDave)
	Dave.PutOrder (Fuelnumber, Gallons) -> FuelOrder
	RainierFuel.fuel (RentbyDave,FuelOrder)
	Dave.PayforFuel (RainierFuel, FuelOrderTotal)

 1.3 (continued)
	Restaurant BBQ

	If (Dave.position = BBQ && Dave.isHungry)
		Dave.walk (BBQ)
		BBQ.receive(Dave)
		DaveAndFriends.SearchMenuForDesiredDood (BBQ.menu) -> foodorder
		BBQ.serve(DaveAndFriends, foodorder)
		DaveAndFriends.eat
		x=random (DaveAndFriends)
		x.pay (payment, BBQ)
	Dave.drive(RentbyDave, RouteToRainier)

 1.4 (continued)
	TicketOffice RainierTicket

	x=random (DaveAndFriends)
	x.BuyTickets (RainierTicket, DaveAndFriends.length, payment) -> TicketsOrder
	RainierTicket.sell (TicketsOrder) -> tickets
	If ( RainierTicket.check (DaveAndFriends, tickets) )
		DaveAndFriends.Hike

 1.5 (continued)
	Hotel Rhotel

	Dave.drive (RentbyDave, RouteToRhotel)
	Rhotel.receive(DaveAndFriends)
	Rhotel.checkfororder
	If Rhotel.FindOrder (DaveAndFriendsHotelOrder)
		Rhotel.checkin (DaveAndFriends, BookedRooms)
	else 
		DaveAndFriends.SearchforRoom(AvaliableRooms)-> DesiredRooms
		DaveAndFriends.order (Rhotel, DesiredRooms, payment)
		Rhotel.checkin (DaveAndFriends, BookedRooms)	
	DaveAndFriends.walk(BookedRooms)
	DaveAndFriends.sleep
 

2. Organise a career fair(Suppose you are the organiser)

	Organizer
	data: name, organization
	actions: invite, schedule, search, inform

	Facility
	data: address, avaliability, capacity
	actions:

	Employer
	data: name
	actions: 

	Student
	data: name, id,
	actions: register, cancel

	Organizer X
	Employer[] PotentialEmployers
	Student[] students
	Facility[] sites

	X.search (sites)-> Facility[] AvaliableSites
	for Employer i in PotentialEmployers
		X.invite (i, X.organization) 
		if i agree
			X.add(i, Employer[] PresentingEmployers)
	X.schedule (AvaliableSites, PresentingEmployers) -> CareerFairTime, CareerFairSites
	X.inform (PresentingEmployers, students, CareerFairTime, CareerFairSites)
	X.invite (students)-> RegisteredStudents


3. Order Pizza from Pizza Hut
	Shop
	data: address, tel, menu, deliveryman[] delivery
	actions: bake, answer, suggest, arrange

	Customer
	data: address, tel, payment
	actions: call, order, receive, pay

	Deliveryman
	data: id
	actions: take, deliver, receive, ride

	Shop PizzaHut
	Customer Dave
	Deliveryman Peter

	Dave.call(PizzaHut.tel) -> isBusy
	If (!isBusy)
		PizzaHut.answer
		Dave.order(PizzaHut.menu)-> Dave'sOrder

		do 
			PizzaHut.suggest(PizzaHut.menu)-> suggestion
			Dave.order(PizzaHut.menu, suggestion)-> Dave'sOrder
		while (Dave'sOrder is not avaliable)
		
		PizzaHut.bake(Dave'sOrder)-> Dave'sPizza
		PizzaHut.arrange(delivery)-> Peter
		Peter.take(Dave'sPizza)
		Peter.deliver(Dave'sPizza)
		If Dave.receive(Dave'sPizza)
			Peter.receive( Dave.pay(Dave'sOrder, Peter) )
		Peter.ride(PizzaHut.address)
	else Dave.callLater(PizzaHut.tel)		

4. Design a code sharing platform (eg: Github).
	Platform
	data: URL, user[] users, rules
	actions: authorize, receive, excute, store, check, warn

	User
	data: id, password
	actions: open, login, command, browse

	Platform CodeHub
	User A,B

	A.open(CodeHub.URL)
	A.login (CodeHub. A.id, A.password)
	CodeHub.authorize(A.id, A.password)-> loginstatus
	if (loginstatus == success)
		A.command ( create/upload/commit/delete/changesettings, CodeFile ) -> commandline
		CodeHub.receive (commandline)
		CodeHub.CheckifHasThePermission (A, commandline, rules) -> permission
		If permission is true
			CodeHub.excute (commandline, CodeFile)
		else CodeHub.warn (A, "you have no permission")
	else
		A.CantLoginNow

	B.open(CodeHub.URL)
	B.login (CodeHub. B.id, B.password)
	CodeHub.authorize(B.id, B.password)-> loginstatus
	if (loginstatus == success)
		B.browse (CodeHub.user[A].files)
		B.command ( pull/comment/fork/branch, CodeFile) -> commandline
		CodeHub.receive (commandline)
		CodeHub.CheckifHasThePermission (B, commandline, rules) -> permission
		If permission is true
			CodeHub.excute (commandline, CodeFile)
		else CodeHub.warn (B, "you have no permission")
	else
		B.CantLoginNow

		
5. Design a soft-drink/snacks vending machine.
	VendingMachine
	data: snack[] snacklist, int[] inventory, float[] prices, TotalPaid
	actions: receive, check, prompt, change, release
	
	Buyer
	data: cash
	actions: select, pay

	VendingMachine SnackMachine
	Buyer Dave

	Dave.select (chocolate) -> order
	SnackMachine.receive (order)
	SnackMachine.check (inventory[order]) -> storage
	if storage>0
		SnackMachine.prompt( prices[order] )
		SnackMachine.TotalPaid=0
	else
		SnackMachine.prompt(OutOfInventoryWarning)
	do
		Dave.pay(cash, SnackMachine)
		SnackMachine.addTotalPaid(cash) 
	while (SnackMachine.TotalPaid < prices[order] )

	If (SnackMachine.TotalPaid > prices[order])
		SnackMachine.giveChange (SnackMachine.TotalPaid - prices[order] )
	SnackMachine.release(order)

